#+TITLE: guix-notes Contributing
#+AUTHOR: Peter Polidoro
#+EMAIL: peter@polidoro.io

* Contributing

** Download Guix Repository

#+BEGIN_SRC sh

git clone https://git.savannah.gnu.org/git/guix.git

#+END_SRC

** Bootstrap and Configure Guix

#+BEGIN_SRC sh

cd guix
git checkout master && git clean -xdf && git checkout . && git pull
guix shell -D guix --pure -- sh -c "./bootstrap && ./configure --localstatedir=/var && make -j$(nproc)"

#+END_SRC

** Create Repository Branch

#+BEGIN_SRC sh

git checkout -b PKG

#+END_SRC

** Edit Or Create Guix Package

*** Edit

#+BEGIN_SRC sh

./pre-inst-env guix edit PKG
# make sure guix-devel-mode is enabled in emacs
# to indent and highlight properly

#+END_SRC

*** Import

#+BEGIN_SRC sh

guix import pypi -r python_pkg
guix import elpa -r -a melpa emacs-pkg

#+END_SRC

** Build Guix Package

#+BEGIN_SRC sh

./pre-inst-env guix build PKG
./pre-inst-env guix build PKG --no-grafts --check --log-file

#+END_SRC

*** Failing Tests

Sometimes tests fail when they are not included in they pypi source.

#+BEGIN_SRC sh

./pre-inst-env guix build --source PKG

#+END_SRC

Check the source to see if the tests are included. If not, use git-fetch to
download the original source repository rather than the source from pypi.

** Size Guix Package

#+BEGIN_SRC sh

./pre-inst-env guix size PKG

#+END_SRC

** Check that dependent packages are not affected

#+BEGIN_SRC sh

./pre-inst-env guix refresh --list-dependent PKG

#+END_SRC

** Lint Guix Package

#+BEGIN_SRC sh

./pre-inst-env guix lint PKG

#+END_SRC

** Style Guix Package

#+BEGIN_SRC sh

./pre-inst-env guix style PKG

#+END_SRC

** Test Guix Package

#+BEGIN_SRC sh

./pre-inst-env guix shell --pure PKG

#+END_SRC

** Stage and Commit Changes

- run magit to stage changes and commit
- run yas-minor-mode-on
- run yas-reload-all to reload snippets
- run yas-insert-snippet and choose guix-commit-message-update-package
- C-c C-c to commit

** Branch Spinoff

If you accidentally commited in the master branch, use branch spinoff to create
new branch and move commits into it. "b s"

** Create Patch

*** Magit

- select commit for a single patch or set of commits for a patch series
- W c C-m l c
- write cover letter
- save cover letter

*** Command line

#+BEGIN_SRC sh

guix shell git:send-email
git format-patch --base=master master

#+END_SRC

** Email Patch

*** Command Line

#+BEGIN_SRC sh

guix shell git:send-email
git send-email --to=guix-patches@gnu.org *.patch

#+END_SRC

*** Emacs

- Send email to guix-patches@gnu.org
- Open patch file and copy subject to email, .e.g. "[PATCH] gnu: kicad: Update to 6.0.4."
- Attach patch to email by opening dired, marking patch file, then C-c RET C-a

** Mulitple New Packages that Depend on Each Other

- Add one new package to scm file starting with dependencies
- Stage and commit single package changes
- Create patch file
- Repeat for every new package ending with final dependent package
- Send cover letter to guix-patches@gnu.org with subject “Add [name of final package] and dependencies”
- Wait for NNN@debbugs.gnu.org infomation in confirmation email
- Send one patch per package to NNN@debbugs.gnu.org starting with dependencies

** Find older version of package

[[https://data.guix.gnu.org/repository/1/branch/master/package/kicad][kicad versions]]
